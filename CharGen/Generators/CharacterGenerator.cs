using CharGen.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CharGen.Generators
{
    public class CharacterGenerator : IGenerator<Character>
    {
        public List<Character> Items { get; private set; }

        private Random _random;
        private Config _config;

        public CharacterGenerator(Config config)
        {
            Items = new List<Character>();
            _random = new Random();

            _config = config;
        }

        public void Generate()
        {
            Items.Add(GenerateCharacter());

            while (Items.Last().DeathDate < _config.Year.Maximum)
            {
                var last = Items.Last();
                var newChar = GenerateCharacter(last);
                Items.Add(newChar);
            }
        }

        public void Write(string fileName)
        {
            var builder = new StringBuilder();
            builder.Append("# This file was generated by CharGen.exe, written by Rick Visser. All characters are fictional and randomly generated.");
            foreach (var character in Items)
            {
                builder.Append("\n" + character.ToParadoxSyntax());
            }
            File.WriteAllText(fileName, builder.ToString());
        }

        /// <summary>
        /// Generates a character. The birth date will be equal to the minimum year specified in the configuration of this generator.
        /// </summary>
        /// <returns></returns>
        private Character GenerateCharacter()
        {
            var birth = _config.Year.Minimum;
            var death = birth + _config.Age.Random;

            return new Character
            {
                Id = _config.FirstCharId.ToString(),
                Name = GetRandomName(),
                Dynasty = _config.Dynasty,
                Religion = _config.ReligionId,
                Culture = _config.Culture,
                BirthDate = birth,
                DeathDate = death
            };
        }

        /// <summary>
        /// Generates a character with a certain father. The birth date of the character are dependent on the death date of the father.
        /// </summary>
        /// <param name="father">The father of the generated character.</param>
        /// <returns>A generated character with the FatherId set to the father parameter.</returns>
        private Character GenerateCharacter(Character father)
        {
            var minimumBirth = father.BirthDate + _config.FertileAge.Minimum;
            var maximumBirth = Math.Min(father.BirthDate + _config.FertileAge.Random, father.DeathDate);

            var birth = _random.Next(minimumBirth, maximumBirth);
            var death = birth + _config.Age.Random;

            return new Character
            {
                Id = (int.Parse(father.Id) + 1).ToString(),
                Name = GetRandomName(),
                Dynasty = _config.Dynasty,
                Religion = _config.ReligionId,
                Culture = _config.Culture,
                FatherId = father.Id,
                BirthDate = birth,
                DeathDate = death
            };
        }

        /// <summary>
        /// Fetches a random name from the configured culture.
        /// </summary>
        /// <returns>A name.</returns>
        private string GetRandomName()
        {
            var names = _config.Culture.MaleNames;
            return names[_random.Next(0, names.Length - 1)];
        }

        public class Config
        {
            public Culture Culture { get; set; }

            public Dynasty Dynasty { get; set; }

            public Range Year { get; set; }

            public Range FertileAge { get; set; }

            public Range Age { get; set; }

            public string FirstCharId { get; set; }

            public string ReligionId { get; set; }
        }
    }
}
